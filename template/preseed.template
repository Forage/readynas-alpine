#!/bin/sh

# --------------------------------------------------------
# Check if we're on a freshly converted system

if test -f /boot/.readynas_converted; then
  # remove ReadyNAS conversion tools
  rc-update del local boot
  rm -f /boot/.readynas_converted
  rm -f /root/answers

  # create users and update files
  while read line; do
    # get user name and id
    UNAME=`echo ${line} | awk -F: '{ print $1 }'`
    UID=`echo ${line} | awk -F: '{ print $3 }'`
    UGID=`echo ${line} | awk -F: '{ print $4 }'`
    UHOME=`echo ${line} | awk -F: '{ print $6 }'`
    if test ${UID} -ge 98; then
      # found someone we're interested in
      echo "Checking user $UNAME"
      AUSER=`grep ${UNAME} /etc/passwd`
      if test -z "${AUSER}"; then
        echo "User ${UNAME} doesn't exist -> creating"
        # get group name for RN user
        UGNAME=`grep ":${UGID}:" /rnos_bak/etc/group | awk -F: '{ print $1 }'`
        # check whether group already exists
        GROUP=`grep "^${UGNAME}:" /etc/group`
        if test -z "${GROUP}"; then
          # nope, need to create
          echo "Group ${UGNAME} doesn't exist -> creating"
          # check if we already have a group with gid UGID
          GID=`grep ":${UGID}:" /etc/group`
          if test -z "${GID}"; then
            # nope, so just use the UGID
            addgroup -g ${UGID} ${UGNAME}
            # and add the user
            adduser -h ${UHOME} -s /bin/sh -G ${UGNAME} -D ${UNAME}
            # no need to change the group since we already created
            # one with a matching GUID
            find /data -user ${UID} -exec chown ${UNAME}: {} \;
          else
            # yup, so new group and chown
            addgroup ${UGNAME}
            adduser -h ${UHOME} -s /bin/sh -G ${UGNAME} -D ${UNAME}
            find /data -group ${UGID} -exec chown :${UGNAME} {} \;
          fi
        else
          # get GID of existing alpine group
          adduser -h ${UHOME} -s /bin/sh -G ${UGNAME} -D ${UNAME}
          find /data -group ${UGID} -exec chown :${UGNAME} {} \;
        fi
        # group done, now for the user
        find /data -user ${UGID} -exec chown ${UNAME}: {} \;
        # set the password for every user we created to 'password'
        echo "${UNAME}:password" | chpasswd
      else
        echo "User ${UNAME} exist ... checking id and group"
        AGID=`echo ${AUSER} | awk -F: '{ print $4 }'`
        # change ownership of files/dirs in /data
        find /data -user $UID -exec chown $UNAME: {} \;
        find /data -group $UGID -exec chown :$AGID {} \;
      fi
    fi
  done < /rnos_bak/etc/passwd

  # fix some symlinks
  ln -s home homes

  # finally delete ourselves
  rm -f /etc/local.d/preseed.start

  # and update from package repository
  apk upgrade

  exit
fi

# =========================================================
# 
# Part 1: Find our original disk layout and mount to /mnt
# for later use with setup-disk
#
# =========================================================

# --------------------------------------------------------
# Enable community repository
sed -i -r 's,#(.*/v.*/community),\1,' /etc/apk/repositories
apk update

# --------------------------------------------------------
# Add required packages
apk add avahi btrfs-progs coreutils cups cups-filters curl dhcpcd dosfstools gawk mc mdadm nano net-snmp nfs-utils ntfs-3g proftpd rsync samba sane sane-backends shadow util-linux

modprobe btrfs
modprobe raid0
modprobe raid1
modprobe raid5
modprobe vfat

# -- assemble raid arrays
mdadm --assemble --scan

# -- check for BTRFS file systems
# - Step1: get list of file systems
BTRFSFS=`btrfs filesystem show | awk -F\' '/^Label:/ { print $2 }'`

# - Step2: split in root and data volumes
#   ROOTFS is the mount for the old ReadyNAS OS (/root/rnos_bak)
#   DATAFS is a list for mounted data volumes under /
ROOTFS=
DATAFS=
for FS in ${BTRFSFS}; do
  if test ! -z `echo ${FS} | grep root`; then
    ROOTFS=${FS}
  else
    DATAFS="${DATAFS}${FS} "
  fi
done

if test -z "${ROOTFS}"; then
  echo "No ReadyNAS OS root partition foubnd -> aborting!!"
  exit 111
fi

if test -z "${DATAFS}"; then
  echo "No data volumes found -> you sure this is a ReadyNAS?"
  exit 111
fi

# !!!
# If we have more than one data partition, on which one do we place the
# OS stuff? For now we just use the first one we find that has a '.apps'
# subvolume and thus has to be the first one created when installing the
# ReadyNAS for the first time.
# !!!
OSVOL=
APPVOL=
ADDMNT=

# create temporary mount dir for our checks
mkdir -p /tmp_btrfs
for DS in ${DATAFS}; do
  # - get the BTRFS subvolumes
  mount LABEL=${DS} /tmp_btrfs
  TSTVOL=`btrfs subvolume list /tmp_btrfs | grep \.apps`
  # if we have a .apps subvol, this will be our OSVOL
  if test ! -z "${TSTVOL}"; then
    # remember the OS volume
    OSVOL=${DS}
    APPVOL=${DS}
    # mount it to /mnt for setup-disks
    mount LABEL=${DS} /mnt
  else
    # collect the non-OS volumes here
    ADDMNT="${ADDMNT}${DS}"
  fi
  umount /tmp_btrfs
done
rm -rf /tmp_btrfs

# by now we should have an OS volume
if test -z "${OSVOL}"; then
  echo "Unable to find suitable volume for OS -> aborting"
  exit 111
fi

# and it should be mounted
TSTMNT=`mount | grep /mnt`
if test -z "$TSTMNT"; then
  echo "No root volume mounted -> can't continue :-("
  exit 111
fi

# mount app volume
if test ! -d /mnt/apps; then
  mkdir /mnt/apps
fi
mount LABEL=${OSVOL} -o subvol=.apps /mnt/apps

# mount additional volumes if any
if test ! -z "${ADDMNT}"; then
  for ADD in ${ADDMNT}; do
    SUBPATH=`echo ${ADD} | awk -F: '{ print $2}'`
    mkdir -p /mnt/${SUBPATH}
    mount LABEL=${ADD} /mnt/${SUBPATH}
  done
fi

# mount backup of old ReadyNAS OS
mkdir -p /mnt/rnos_bak
mount LABEL=${ROOTFS} /mnt/rnos_bak

echo "root:${ROOTFS}"
echo "os:  ${OSVOL}"
echo "app: ${APPVOL}"
echo "oth: ${ADDMNT}"

# -- find the original ReadyNAS USB boot drive
USBDISK=`lsblk -io KNAME,MODEL | grep "USB DISK" | awk '{ print $1 }'`
if test -z "${USBDISK}"; then
  echo "No USB boot disk found -> you sure this is a ReadyNAS?"
  exit 111
fi

# mount the boot disk so we can use it
mkdir -p /mnt/boot
mount /dev/${USBDISK}1 /mnt/boot

# create a backup in /mnt/rnos_bak/boot
mkdir -p /mnt/rnos_bak/boot
tar cf - . -C /mnt/boot | tar -C /mnt/rnos_bak/boot -xf -
cd - 2>&1 /dev/null
# make a backup copy of the original MBR
dd if=/dev/${USBDISK} of=/mnt/rnos_bak/boot/readynas.mbr bs=446 count=1

# delete old stuff to make some room otherwise we may run into
# problems on ReadyNAS systems with only 128 MB of boot storage
rm -f /mnt/boot/*

# override system configs of alpine here
mkdir -p /etc/frontview
SVCS="proftpd rsync samba"
for SVC in ${SVCS}; do
  tar cf - ${SVC} -C /mnt/rnos_bak/etc/frontview | tar -C /etc/frontview -xf -
done
# use ReadyNAS configs for our Services
SVCS="proftpd samba snmp"
for SVC in ${SVCS}; do
  tar cf - ${SVC} -C /mnt/rnos_bak/etc | tar -C /etc -xf -
done
# Rsync only has a config file
tar cf - /mnt/rnos_bak/etc/rsyncd.conf | tar -C /etc -xf -
# and don't forget the NFS exports
# !!! PROBABLY NEEDS TWEAKING !!!
tar cf - /mnt/rnos_bak/etc/exports | tar -C /etc -xf -

# =========================================================
# 
# Part 2: create the answer file for setup-alpine
#   Note: the KEYMAP will be set during generation of the
#         ISO file so don't hardcode here!
#
# =========================================================

# --------------------------------------------------------
# let's do the easy stuff first
MEHOST=`cat /mnt/rnos_bak/etc/hostname`
MEDOMAIN=`cat /mnt/rnos_bak/etc/resolv.conf | grep search | awk '{ print $2 }'`
if test -z "${MEDOMAIN}"; then
  MEDOMAIN="localhost.localnet"
fi
MEDNSSRV=`cat /mnt/rnos_bak/etc/resolv.conf | grep nameserver | grep -v : | awk '{ print $2 }'`
if test -z "${MEDNSSRV}"; then
  MEDNSSRV="9.9.9.9"
fi
METIMEZONE=`cat /mnt/rnos_bak/etc/timezone`
if test -z "${METIMEZONE}"; then
  METIMEZONE="UTC"
fi

# --------------------------------------------------------
# now for detecting the network interfaces
MEIFACEDFLT="auto lo
iface lo inet loopback

"
for IFACE in eth0 eth1; do
    MEIFACEDFLT="${MEIFACEDFLT}
auto ${IFACE}
iface ${IFACE} inet dhcp

"
done

# - let's see whether we have a config first
if test ! -f /mnt/rnos_bak/etc/network/interfaces; then
  # most likely a DHCP setup
  INTERFACESOPTS=${MEIFACEDFLT}
else
  # get the original from the ReadyNAS
  RNIFACES=`cat /mnt/rnos_bak/etc/network/interfaces`
  if test -z "${RNIFACES}"; then
    # if empty run with the defaults
    INTERFACESOPTS=${MEIFACEDFLT}
  else
    INTERFACESOPTS="auto lo
iface lo inet loopback

"
    # find the configured interfaces
    RNIFS=`cat ${RNIFACES} | awk '/^iface/ { print $2 }'`
    for RNIF in ${RNIFS}; do
      INTERFACESOPTS="${INTERFACESOPTS}auto ${RNIF}
"
    done
    INTERFACESOPTS="${INTERFACESOPTS}

${RNIFACES}
"
  fi
fi

# --------------------------------------------------------
# create the answers file
cat - > /root/answers <<-__EOF__
KEYMAPOPTS="%KEYMAP% %KEYMAP%"
HOSTNAMEOPTS="-n ${MEHOST}"
DNSOPTS="-d ${MEDOMAIN} ${MEDNSSRV}"
INTERFACESOPTS="${INTERFACESOPTS}"
TIMEZONEOPTS="-z ${METIMEZONE}"
PROXYOPTS=none
APKREPOSOPTS="-c -1"
SSHDOPTS="-c openssh"
USEROPTS="-a -g \"audio video netdev\" admin"
NTPOPTS="-c chrony"
# since we're using setup-disk /mnt
DISKOPTS="-z --please-dont-do-anything"
__EOF__

# --------------------------------------------------------
# Now run basic setup and fail for disk configuration
setup-alpine -e -f /root/answers

# ==
# Optional additional stuff here, like
# - creating the original users defined on the ReadyNAS
# - change the passwords
# - set up SSH keys
# - ...
# ===

# --------------------------------------------------------
# Tweak /etc/issue, clear /etc/motd
cat - >/etc/issue <<-__EOF__

Terminal ready on \l.

__EOF__
> /etc/motd

# =========================================================
# 
# Part 3: enable the daemons we want to use
#
# =========================================================

# set the root password
echo "root:password" | chpasswd
sync

# --------------------------------------------------------
# source the ReadyNAS setup
. /mnt/rnos_bak/etc/default/services

if test "${NFS}" = "1"; then
  rc-update add nfs || true
else
  rc-update del nfs || true
fi

if test "${PROFTPD}" = "1"; then
  rc-update add proftpd || true
else
  rc-update del proftpd || true
fi

if test "${SAMBA}" = "1"; then
  rc-update add samba || true
else
  rc-update del samba || true
fi

if test "${RSYNC}" = "1"; then
  rc-update add rsyncd || true
else
  rc-update del rsyncd || true
fi

if test "${SNMPD}" = "1"; then
  rc-update add snmpd || true
else
  rc-update del snmpd || true
fi

if test "${AVAHI}" = "1"; then
  rc-update add avahi-daemon || true
else
  rc-update del avahi-daemon || true
fi

# let's start cups and have it listen on all ports
# sed -i -e 's/^Listen localhost:631/Listen 631/g' /etc/cups/cupsd.conf
# sed -i -e 's/^\(IdleExitTimeout.*\)/# \1/g' /etc/cups/cupsd.conf
# find active interfaces
CUPSALLOW=
ETHS="`ifconfig | grep Ethernet | awk '{ print $1 }'`"
ETHS=${ETHS//:}
for ETH in $ETHS; do
  CUPSALLOW="${CUPSALLOW}\n  Allow @IF(${ETH})"
  # IPADDRS="`ip a s $ETH | grep inet | grep -v 'scope link' | awk '{ print $2 }'`"
  # for IPAD in ${IPADDRS}; do
  #   CUPSALLOW="${CUPSALLOW}\n  Allow ${IPAD}"
  # done
done

# Note: use '#' as separator since CUPSALLOW contains '/'
sed -e "s#%CUPSALLOW%#${CUPSALLOW}#g" /etc/readynas/cups/cupsd.conf.template > /etc/cups/cupsd.conf
adduser root lpadmin
rc-update add cupsd default

# force ssh running
rc-update add ssh default

# make damn sure we run on first boot after alpine install
rc-update add local boot

# =========================================================
# 
# Part 4: finalize the disk setup
#
# =========================================================

setup-disk /mnt

# --------------------------------------------------------
# Fix root= in /boot/extlinux.conf to use UUID instead
# - run blkid to get UUID of $OSVOL
OSUUID=`blkid | grep "\"${OSVOL}\"" | awk '{ match($0, /UUID="[a-f0-9-]+"/, arr); if (arr[0] != "" ) print arr[0] }'`
# kernel doesn't like quoted strings, fstab needs 'em ...
OSTAB=`echo ${OSUUID} | sed -e 's/"//g'`
echo "Found $OSTAB for new root partition"
sed -i -e "s/root=[A-Za-z0-9/=\":-]\+/root=$OSTAB/g" /mnt/boot/extlinux.conf
sed -i -e "s/ quiet / /g" /mnt/boot/extlinux.conf

# --------------------------------------------------------
# Fix /etc/fstab for new system
echo "${OSUUID}   /           btrfs   rw,relatime,space_cache,subvol=/        0 1" >  /mnt/etc/fstab
echo "${OSUUID}   /data       btrfs   rw,relatime,space_cache,subvol=/        0 2" >> /mnt/etc/fstab
echo "${OSUUID}   /apps       btrfs   rw,relatime,space_cache,subvol=/.apps   0 2" >> /mnt/etc/fstab
echo "${OSUUID}   /home       btrfs   rw,relatime,space_cache,subvol=/home    0 2" >> /mnt/etc/fstab

# --------------------------------------------------------
# mount the boot disk
USBUUID=`blkid | grep "^/dev/${USBDISK}1" | awk '{ match($0, /UUID="[A-Fa-f0-9-]+"/, arr); if (arr[0] != "" ) print arr[0] }'`
if test -z "${USBUUID}"; then
  echo "Oops, there's no UUID for /dev/${USBDISK}1"
  exit 111
fi
echo "${USBUUID}  /boot       vfat    rw,norelatime,noatime                   0 2" >> /mnt/etc/fstab

# --------------------------------------------------------
# Find other UUIDs
ROOTUUID=`blkid | grep "\"${ROOTFS}\"" | awk '{ match($0, /UUID="[a-f0-9-]+"/, arr); if (arr[0] != "" ) print arr[0] }'`
if test ! -z "${ROOTUUID}"; then
  echo "${ROOTUUID}   /rnos_bak   btrfs   rw,relatime,space_cache,subvol=/        0 2" >>  /mnt/etc/fstab
fi

for ADD in ${ADDMNT}; do
  SUBPATH=`echo ${ADD} | awk -F: '{ print $2 }'`
  SUBUUID=`blkid | grep "\"${ADD}\"" | awk '{ match($0, /UUID="[a-f0-9-]+"/, arr); if (arr[0] != "" ) print arr[0] }'`
  if test ! -z "${SUBUUID}"; then
    echo "${SUBUUID} /${SUBPATH}   btrfs   rw,relatime,space_cache,subvol=/${SUBPATH}        0 2" >>  /mnt/etc/fstab
  fi
done

echo "/dev/cdrom    /media/cdrom    iso9660 noauto,ro     0   0" >> /mnt/etc/fstab
# echo "/dev/usbdisk  /media/cdrom    vfat    noauto        0   0" >> /mnt/etc/fstab
echo "tmpfs         /tmp            tmpfs   nosuid,nodev  0   0" >> /mnt/etc/fstab

# --------------------------------------------------------
# set flag for first boot
touch /mnt/boot/.readynas_converted

# --------------------------------------------------------
# check for syslinux.cfg and move if present
if test -f /mnt/boot/syslinux.cfg; then
  mv /mnt/boot/syslinux.cfg /mnt/boot/syslinux.cfg.old
fi

# --------------------------------------------------------
# remove quit from kernel command line, try to force video
sed -i -e "s/ quiet/ video=1024x768@60/g" /mnt/boot/extlinux.conf

# --------------------------------------------------------
# allow root login with password
SSHPW=`grep "^PermitRootLogin yes" /mnt/etc/ssh/sshd_config`
if test -z "${SSHPW}"; then
  sed -i -e 's/\(#PermitRootLogin.*\)/\1\nPermitRootLogin yes/g' /mnt/etc/ssh/sshd_config
fi

# =========================================================
# 
# Part 5: clean up
#
# =========================================================

# unmount old file systems
# !!! HINT !!!
# comment to leave mounts intact for inspection
# mount | awk '/\/mnt/ { print $3 }' | sort -r | xargs -I{} umount {}

# This is the end, my friend
sync
# !!! HINT !!!
# comment to prevent automatic poweroff after run
%LASTRNCMD%
