#!/bin/sh

# =========================================================
# 
# Part 1: Find our original disk layout and mount to /mnt
# for later use with setup-disk
#
# =========================================================

# --------------------------------------------------------
# Enable community repository
sed -i -r 's,#(.*/v.*/community),\1,' /etc/apk/repositories
apk update

# --------------------------------------------------------
# Add required packages
apk add avahi bash btrfs-progs coreutils curl dhcp dhcpcd dosfstools mc mdadm nano net-snmp nfs-utils ntfs-3g rsync samba shadow util-linux zsh

modprobe btrfs
modprobe raid0
modprobe raid1
modprobe raid5
modprobe vfat

# -- assemble raid arrays
mdadm --assemble --scan 2>&1 /dev/null

# -- check for BTRFS file systems
# - Step1: get list of file systems
BTRFSFS=`btrfs filesystem show | awk -F\' '/^Label:/ { print $2 }'`

# - Step2: split in root and data volumes
#   ROOTFS is the mount for the old ReadyNAS OS (/root/rnos_bak)
#   DATAFS is a list for mounted data volumes under /
ROOTFS=
DATAFS=
for FS in ${BTRFSFS}; do
  if test ! -z `echo ${FS} | grep root`; then
    ROOTFS=${FS}
  else
    DATAFS="${DATAFS}${FS} "
  fi
done

if test -z "${ROOTFS}"; then
  echo "No ReadyNAS OS root partition foubnd -> aborting!!"
  exit 111
fi

if test -z "${DATAFS}"; then
  echo "No data volumes found -> you sure this is a ReadyNAS?"
  exit 111
fi

# echo ${ROOTFS}
# echo ${DATAFS}

# !!!
# If we have more than one data partition, on which one do we place the
# OS stuff? For now we just use the first one we find that has a '.apps'
# subvolume and thus has to be the first one created when installing the
# ReadyNAS for the first time.
# !!!
OSVOL=
APPVOL=
ADDMNT=

# create temporary mount dir for our checks
mkdir -p /tmp_btrfs
for DS in ${DATAFS}; do
  # - get the BTRFS subvolumes
  mount LABEL=${DS} /tmp_btrfs
  TSTVOL=`btrfs subvolume list /tmp_btrfs | grep \.apps`
  # if we have a .apps subvol, this will be our OSVOL
  if test ! -z "${TSTVOL}"; then
    # remember the OS volume
    OSVOL=${DS}
    APPVOL=${DS}
    # mount it to /mnt for setup-disks
    mount LABEL=${DS} /mnt
  else
    # collect the non-OS volumes here
    ADDMNT="${ADDMNT}${DS}"
  fi
  umount /tmp_btrfs
done
rm -rf /tmp_btrfs

# by now we should have an OS volume
if test -z "${OSVOL}"; then
  echo "Unable to find suitable volume for OS -> aborting"
  exit 111
fi

# and it should be mounted
TSTMNT=`mount | grep /mnt`
if test -z "$TSTMNT"; then
  echo "No root volume mounted -> can't continue :-("
  exit 111
fi

# mount app volume
if test ! -d /mnt/apps; then
  mkdir /mnt/apps
fi
mount LABEL=${OSVOL} -o subvol=.apps /mnt/apps

# mount additional volumes if any
if test ! -z "${ADDMNT}"; then
  for ADD in ${ADDMNT}; do
    SUBPATH=`echo ${ADD} | awk -F: '{ print $2}'`
    mkdir -p /mnt/${SUBPATH}
    mount LABEL=${ADD} /mnt/${SUBPATH}
  done
fi

# mount backup of old ReadyNAS OS
mkdir -p /mnt/rnos_bak
mount LABEL=${ROOTFS} /mnt/rnos_bak

echo "root:${ROOTFS}"
echo "os:  ${OSVOL}"
echo "app: ${APPVOL}"
echo "oth: ${ADDMNT}"

# -- find the original ReadyNAS USB boot drive
USBDISK=`lsblk -io KNAME,MODEL | grep "USB DISK" | awk '{ print $1 }'`
if test -z "${USBDISK}"; then
  echo "No USB boot disk found -> you sure this is a ReadyNAS?"
  exit 111
fi

# mount the boot disk so we can use it
mkdir -p /mnt/boot
mount /dev/${USBDISK}1 /mnt/boot

# create a backup in /etc/readynas_boot
mkdir -p /etc/readynas_boot
tar cf - . -C /mnt/boot | tar -C /etc/readynas_boot -xf -
cd - 2>&1 /dev/null
# make a backup copy of the original MBR
dd if=/dev/${USBDISK} of=/etc/readynas_boot/readynas.mbr bs=446 count=1

# better safe than sorry: copy stuff from rnos_bak to /etc
# if we don't need to, we can remove that later.
mkdir -p /etc/readynas/etc
# ReadyNAS overrides for system utils
tar cf - frontview -C /mnt/rnos_bak/etc | tar -C /etc/readynas/etc -xf -
# ReadyNAS frontview binaries
tar cf - frontview -C /mnt/rnos_bak | tar -C /etc/readynas -xf -

# override system configs of alpine here
mkdir /etc/frontview
SVCS="proftpd rsync samba"
for SVC in ${SVCS}; do
  tar cf - ${SVC} -C /mnt/rnos_bak/etc/frontview | tar -C /etc/frontview -xf -
done
# use ReadyNAS configs for our Services
SVCS="proftpd samba snmp"
for SVC in ${SVCS}; do
  tar cf - ${SVC} -C /mnt/rnos_bak/etc | tar -C /etc -xf -
done
# Rsync only has a config file
tar cf - /mnt/rnos_bak/etc/rsyncd.conf | tar -C /etc -xf -
# and don't forget the NFS exports
# !!! PROBABLY NEEDS TWEAKING !!!
tar cf - /mnt/rnos_bak/etc/exports | tar -C /etc -xf -


# =========================================================
# 
# Part 2: create the answer file for setup-alpine
#   Note: the KEYMAP will be set during generation of the
#         ISO file so don't hardcode here!
#
# =========================================================

# --------------------------------------------------------
# let's do the easy stuff first
MEHOST=`cat /mnt/rnos_bak/etc/hostsname``
MEDOMAIN=`cat /mnt/rnos_bak/etc/resolv.conf | grep search | awk '{ print $2 }'`
if test -z "${MEDOMAIN}"; then
  MEDOMAIN="localhost.localnet"
fi
MEDNSSRV=`cat /mnt/rnos_bak/etc/resolv.conf | grep nameserver | grep -v : | awk '{ print $2 }'`
if test -z "${MEDNSSRV}"; then
  MEDNSSRV="9.9.9.9"
fi
METIMEZONE=`cat /mnt/rnos_bak/etc/timezone`
if test -z "${METIMEZONE}"; then
  METIMEZONE="UTC"
fi

# --------------------------------------------------------
# now for detecting the network interfaces
MEIFACEDFLT="auto lo
iface lo inet loopback

"
for IFACE in eth0 eth1; do
    MEIFACEDFLT= "${MEIFACEDFLT}
auto ${IFACE}
iface ${IFACE} inet dhcp

"
done

# - let's see whether we have a config first
if test ! -f /mnt/rnos_bak/etc/network/interfaces; then
  # most likely a DHCP setup
  INTERFACESOPTS=${MEIFACEDFLT}
else
  # get the original from the ReadyNAS
  RNIFACES=`cat /mnt/rnos_bak/etc/network/interfaces`
  if test -z "${RNIFACES}"; then
    # if empty run with the defaults
    INTERFACESOPTS=${MEIFACEDFLT}
  else
    INTERFACESOPTS="auto lo
iface lo inet loopback

"
    # find the configured interfaces
    RNIFS=`cat ${RNIFACES} | awk '/^iface/ { print $2 }'`
    for RNIF in ${RNIFS}; do
      INTERFACESOPTS="${INTERFACESOPTS}auto ${RNIF}
"
    done
    INTERFACESOPTS="${INTERFACESOPTS}

${RNIFACES}
"
  fi
fi

# --------------------------------------------------------
# create the answers file
cat - > /root/answers <<-__EOF__
KEYMAPOPTS="%KEYMAP% %KEYMAP%"
HOSTNAMEOPTS="-n ${MEHOST}"
DNSOPTS="-d ${MEDOMAIN} ${MEDNSSRV}"
INTERFACESOPTS="${INTERFACESOPTS}"
TIMEZONEOPTS="-z ${METIMEZONE}"
PROXYOPTS=none
APKREPOSOPTS="-1"
SSHDOPTS="-c openssh"
NTPOPTS="-c chrony"
# since we're using setup-disk /mnt
DISKOPTS="-z --please-dont-do-anything"
__EOF__

# --------------------------------------------------------
# Now run basic setup and fail for disk configuration
setup-alpine -e -f /root/answers

# ==
# Optional additional stuff here, like
# - creating the original users defined on the ReadyNAS
# - change the passwords
# - set up SSH keys
# - ...
# ===

# --------------------------------------------------------
# Tweak /etc/issue, clear /etc/motd
cat - >/etc/issue <<-__EOF__

Terminal ready on \l.

$(ssh-keygen -l -v -f /etc/ssh/ssh_host_ecdsa_key.pub)

__EOF__
> /etc/motd

# =========================================================
# 
# Part 3: enable the daemons we want to use
#
# =========================================================

# --------------------------------------------------------
# source the ReadyNAS setup
. /mnt/rnos_bak/etc/default/services

if test ${NFS} -eq 1; then
  rc-update add nfs || true
else
  rc-update del nfs || true
fi

if test ${PROFTPD} -eq 1; then
  rc-update add proftpd || true
else
  rc-update del proftpd || true
fi

if test ${SAMBA} -eq 1; then
  rc-update add samba || true
else
  rc-update del samba || true
fi

if test ${RSYNC} -eq 1; then
  rc-update add rsync || true
else
  rc-update del rsync || true
fi

if test ${SNMPD} -eq 1; then
  rc-update add snmpd || true
else
  rc-update del snmpd || true
fi

if test ${AVAHI} -eq 1; then
  rc-update add avahi-daemon || true
else
  rc-update del avahi-daemon || true
fi

# =========================================================
# 
# Part 4: finalize the disk setup
#
# =========================================================

setup-disk /mnt

# This is the end, my friend
# sync
# reboot